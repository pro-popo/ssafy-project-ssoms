{"remainingRequest":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\s03p31b303\\frontend\\src\\views\\admin\\Schema.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\s03p31b303\\frontend\\src\\views\\admin\\Schema.vue","mtime":1604931830526},{"path":"D:\\s03p31b303\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnNldHRpbmctc2NoZW1hLWRhdGEgew0KICB3aWR0aDogNzAwcHg7DQogIGRpc3BsYXk6IGZsZXg7DQogIGxpbmUtaGVpZ2h0OiA2NXB4Ow0KfQ0KLnNjaGVtYS1zZWFyY2hiYXIgew0KICBkaXNwbGF5OiBmbGV4Ow0KICB3aWR0aDogNTAwcHg7DQogIGxpbmUtaGVpZ2h0OiA2NXB4Ow0KICBtYXJnaW4tYm90dG9tOiAyNXB4Ow0KfQ0KLnNjaGVtYS1saXN0LWFkbWluIHsNCiAgZm9udC1zaXplOiAxNXB4Ow0KfQ0KLnNjaGVtYS1saXN0LWFkbWluIG9sIHsNCiAgcGFkZGluZy10b3A6IDdweDsNCiAgbWFyZ2luLWJvdHRvbTogN3B4Ow0KfQ0KLnNjaGVtYS1saXN0LWFkbWluID4gb2wgPiBidXR0b24gew0KICBmbG9hdDogcmlnaHQ7DQogIG1hcmdpbi1yaWdodDogMTBweDsNCn0NCi5zY2hlbWEtYm94IHsNCiAgb3ZlcmZsb3c6IHNjcm9sbDsNCiAgb3ZlcmZsb3cteDogaGlkZGVuOw0KICB3aWR0aDogODAwcHg7DQogIGhlaWdodDogMjAwcHg7DQogIGJvcmRlcjogMnB4IHNvbGlkIGdyYXk7DQp9DQouc2NoZW1hLWJveCBociB7DQogIG1hcmdpbjogMHB4Ow0KfQ0KLnNldHRpbmctc2NoZW1hSUQtZm9udCB7DQogIGZvbnQtc2l6ZTogMjBweDsNCiAgbWFyZ2luLXJpZ2h0OiAyMHB4Ow0KfQ0KLnNldHRpbmctc2NoZW1hUGFzc3dvcmQtZm9udCB7DQogIGZvbnQtc2l6ZTogMjBweDsNCiAgbWFyZ2luLXJpZ2h0OiA3M3B4Ow0KfQ0KLnNldHRpbmctc2NoZW1hLXNhdmUtYnV0dG9uIHsNCiAgbWFyZ2luLXRvcDogMTBweDsNCiAgbWFyZ2luLXJpZ2h0OiA1MHB4Ow0KICBwYWRkaW5nOiAxNXB4IDIwcHggIWltcG9ydGFudDsNCiAgZm9udC1zaXplOiAxNXB4ICFpbXBvcnRhbnQ7DQogIGZsb2F0OiByaWdodDsNCn0NCg=="},{"version":3,"sources":["Schema.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Schema.vue","sourceRoot":"src/views/admin","sourcesContent":["<template>\r\n  <div>\r\n    <h2 class=\"mb-3\">Schema 설정</h2>\r\n    <div class=\"schema-searchbar\">\r\n      <span class=\"mdi mdi-magnify\"></span>\r\n      <v-text-field label=\"검색할 스키마명을 입력해주세요.\"></v-text-field>\r\n    </div>\r\n    <div class=\"schema-box\">\r\n      <div\r\n        class=\"schema-list-admin\"\r\n        v-for=\"schema in schemaList\"\r\n        :key=\"schema.userID\"\r\n      >\r\n        <ol>\r\n          {{\r\n            schema.userID\r\n          }}\r\n          <button @click=\"deleteSchema(schema.userID)\">삭제</button>\r\n        </ol>\r\n        <hr />\r\n      </div>\r\n    </div>\r\n    <div class=\"mt-7\">\r\n      <span style=\"font-size:25px; color:gray;\">Schema |</span>\r\n    </div>\r\n    <div class=\"setting-schema-data\">\r\n      <span class=\"setting-schemaID-font\">ID</span>\r\n      <v-text-field\r\n        label=\"스키마ID를 입력해주세요.\"\r\n        v-model=\"userID\"\r\n      ></v-text-field>\r\n    </div>\r\n    <v-btn\r\n      color=\"primary\"\r\n      class=\"setting-schema-save-button\"\r\n      @click=\"saveSchema\"\r\n    >\r\n      저장\r\n    </v-btn>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport SERVER from \"@/api/spring.js\";\r\n\r\nexport default {\r\n  name: \"Schema\",\r\n  data() {\r\n    return {\r\n      schemaList: [],\r\n      userID: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    deleteSchema(schemaId) {\r\n      const itemToFind = this.schemaList.find(function(item) {\r\n        return item.userID === schemaId;\r\n      });\r\n      const idx = this.schemaList.indexOf(itemToFind);\r\n      if (idx > -1) {\r\n        this.schemaList.splice(idx, 1);\r\n      }\r\n      axios\r\n        .post(SERVER.URL + SERVER.ROUTES.setSettingsSchema, this.schemaList)\r\n        .then((res) => {\r\n          console.log(res.data.result);\r\n          if (res.data.result === \"saveSuccess\") {\r\n            alert(\"스키마가 성공적으로 삭제되었습니다.\");\r\n          }\r\n          this.userID = \"\";\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    getSettingsSchema() {\r\n      axios\r\n        .get(SERVER.URL + SERVER.ROUTES.getSettingsSchema)\r\n        .then((res) => {\r\n          this.schemaList = res.data.map.schema;\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    saveSchema() {\r\n      // 중복 및 존재여부 확인\r\n      axios\r\n        .post(SERVER.URL + SERVER.ROUTES.checkSettingsSchema, {\r\n          userID: this.userID\r\n        })\r\n        .then((res) => {\r\n          console.log(\"1\", res.data.result);\r\n          if (res.data.result === \"duplicate\") {\r\n            alert(\"이미 존재하는 스키마 ID 입니다.\");\r\n          } else if (res.data.result === \"notExist\") {\r\n            alert(\"DB에 존재하지 않는 스키마 ID 입니다.\");\r\n          } else if (res.data.result === \"success\") {\r\n            // 조건 만족 후, 스키마 저장\r\n            this.schemaList.push({ userID: this.userID });\r\n            axios\r\n              .post(\r\n                SERVER.URL + SERVER.ROUTES.setSettingsSchema,\r\n                this.schemaList\r\n              )\r\n              .then((res) => {\r\n                console.log(res.data.result);\r\n                if (res.data.result === \"saveSuccess\") {\r\n                  alert(\"스키마를 성공적으로 추가하였습니다.\");\r\n                }\r\n                this.userID = \"\";\r\n              })\r\n              .catch(() => console.log(\"실패\"));\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  },\r\n  created() {\r\n    this.getSettingsSchema();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.setting-schema-data {\r\n  width: 700px;\r\n  display: flex;\r\n  line-height: 65px;\r\n}\r\n.schema-searchbar {\r\n  display: flex;\r\n  width: 500px;\r\n  line-height: 65px;\r\n  margin-bottom: 25px;\r\n}\r\n.schema-list-admin {\r\n  font-size: 15px;\r\n}\r\n.schema-list-admin ol {\r\n  padding-top: 7px;\r\n  margin-bottom: 7px;\r\n}\r\n.schema-list-admin > ol > button {\r\n  float: right;\r\n  margin-right: 10px;\r\n}\r\n.schema-box {\r\n  overflow: scroll;\r\n  overflow-x: hidden;\r\n  width: 800px;\r\n  height: 200px;\r\n  border: 2px solid gray;\r\n}\r\n.schema-box hr {\r\n  margin: 0px;\r\n}\r\n.setting-schemaID-font {\r\n  font-size: 20px;\r\n  margin-right: 20px;\r\n}\r\n.setting-schemaPassword-font {\r\n  font-size: 20px;\r\n  margin-right: 73px;\r\n}\r\n.setting-schema-save-button {\r\n  margin-top: 10px;\r\n  margin-right: 50px;\r\n  padding: 15px 20px !important;\r\n  font-size: 15px !important;\r\n  float: right;\r\n}\r\n</style>\r\n"]}]}