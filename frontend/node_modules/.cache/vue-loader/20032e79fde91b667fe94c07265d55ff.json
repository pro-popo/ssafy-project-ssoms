{"remainingRequest":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\s03p31b303\\frontend\\src\\components\\realtime-monitoring\\schema-status\\AllSchemaStastics.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\s03p31b303\\frontend\\src\\components\\realtime-monitoring\\schema-status\\AllSchemaStastics.vue","mtime":1605454471606},{"path":"D:\\s03p31b303\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouc2NoZW1hLWNoYXJ0LWJveCB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsNCiAgaGVpZ2h0OiA1NTBweDsNCn0NCi5zY2hlbWEtY2hhcnQtYm94ID4gZGl2IHsNCiAgd2lkdGg6IDQ5JTsNCiAgbWluLXdpZHRoOiA1MDBweDsNCn0NCi5zY2hlbWEtY2hhcnQtc2l6ZSB7DQogIGhlaWdodDogMjUwcHg7DQogIGRpc3BsYXk6IGZsZXg7DQp9DQouc2NoZW1hLWNoYXJ0LXNpemUtaW4gew0KICB3aWR0aDogNTAlICFpbXBvcnRhbnQ7DQp9DQo="},{"version":3,"sources":["AllSchemaStastics.vue"],"names":[],"mappingsotBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AllSchemaStastics.vue","sourceRoot":"src/components/realtime-monitoring/schema-status","sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"display: flex; justify-content: space-between\">\r\n      <div style=\"display: flex\">\r\n        <h2 class=\"mt-2 mr-3\">Schema Status</h2>\r\n        <v-btn-toggle\r\n          group\r\n          mandatory\r\n          color=\"#2196F3\"\r\n          v-model=\"toggle_exclusive\"\r\n        >\r\n          <v-btn @click=\"changeChart('line')\" style=\"margin: 4px 0px;\"\r\n            ><v-icon>mdi-chart-line</v-icon></v-btn\r\n          >\r\n          <v-btn @click=\"changeChart('pie')\" style=\"margin: 4px 0px;\"\r\n            ><v-icon>mdi-chart-pie</v-icon></v-btn\r\n          >\r\n        </v-btn-toggle>\r\n      </div>\r\n      <v-menu transition=\"slide-y-transition\" :close-on-content-click=\"false\">\r\n        <template v-slot:activator=\"{ on, attrs }\">\r\n          <v-btn v-bind=\"attrs\" v-on=\"on\" fab x-small class=\"mt-2\">\r\n            <v-icon>mdi-playlist-plus</v-icon>\r\n          </v-btn>\r\n        </template>\r\n        <v-list dense>\r\n          <v-list-item\r\n            v-for=\"(item, i) in items\"\r\n            :key=\"i\"\r\n            @click=\"toggleCheckBox(i)\"\r\n          >\r\n            <v-list-item-icon>\r\n              <v-icon v-text=\"item.iconTrue\" v-if=\"item.isShow\"></v-icon>\r\n              <v-icon v-text=\"item.iconFalse\" v-else></v-icon>\r\n            </v-list-item-icon>\r\n            <v-list-item-content>\r\n              <v-list-item-title v-text=\"item.title\"></v-list-item-title>\r\n            </v-list-item-content>\r\n          </v-list-item>\r\n        </v-list>\r\n      </v-menu>\r\n    </div>\r\n    <div class=\"schema-chart-box\">\r\n      <div>\r\n        <div v-if=\"items[0].isShow\">\r\n          <h4>Executions</h4>\r\n          <v-card elevation=\"2\" class=\"schema-chart-size\">\r\n            <IEcharts\r\n              :option=\"option1_line\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n            <IEcharts\r\n              :option=\"option1_pie\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n          </v-card>\r\n        </div>\r\n        <div v-if=\"items[1].isShow\" class=\"mt-3\">\r\n          <h4>CpuTimeTotal</h4>\r\n          <v-card elevation=\"2\" class=\"schema-chart-size\">\r\n            <IEcharts\r\n              :option=\"option2_line\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n            <IEcharts\r\n              :option=\"option2_pie\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n          </v-card>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div v-if=\"items[2].isShow\">\r\n          <h4>ElapsedTimeTotal</h4>\r\n          <v-card elevation=\"2\" class=\"schema-chart-size\">\r\n            <IEcharts\r\n              :option=\"option3_line\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n            <IEcharts\r\n              :option=\"option3_pie\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n          </v-card>\r\n        </div>\r\n        <div v-if=\"items[3].isShow\" class=\"mt-3\">\r\n          <h4>BufferGetsAvg</h4>\r\n          <v-card elevation=\"2\" class=\"schema-chart-size\">\r\n            <IEcharts\r\n              :option=\"option4_line\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n            <IEcharts\r\n              :option=\"option4_pie\"\r\n              :resizable=\"true\"\r\n              class=\"schema-chart-size-in\"\r\n            />\r\n          </v-card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapMutations } from \"vuex\";\r\nimport IEcharts from \"vue-echarts-v3/src/full.js\";\r\nimport axios from \"axios\";\r\nimport SERVER from \"@/api/spring.js\";\r\n\r\nexport default {\r\n  name: \"AllSchemaStastice\",\r\n  components: {\r\n    IEcharts\r\n  },\r\n  data() {\r\n    return {\r\n      toggle_exclusive: 5,\r\n      items: [\r\n        {\r\n          title: \"Executions\",\r\n          isShow: true,\r\n          iconTrue: \"mdi-checkbox-marked-circle-outline\",\r\n          iconFalse: \"mdi-checkbox-blank-circle-outline\"\r\n        },\r\n        {\r\n          title: \"CpuTimeTotal\",\r\n          isShow: true,\r\n          iconTrue: \"mdi-checkbox-marked-circle-outline\",\r\n          iconFalse: \"mdi-checkbox-blank-circle-outline\"\r\n        },\r\n        {\r\n          title: \"ElapsedTimeTotal\",\r\n          isShow: true,\r\n          iconTrue: \"mdi-checkbox-marked-circle-outline\",\r\n          iconFalse: \"mdi-checkbox-blank-circle-outline\"\r\n        },\r\n        {\r\n          title: \"BufferGetsAvg\",\r\n          isShow: true,\r\n          iconTrue: \"mdi-checkbox-marked-circle-outline\",\r\n          iconFalse: \"mdi-checkbox-blank-circle-outline\"\r\n        }\r\n      ],\r\n      option1_line: {\r\n        color: this.getColor(),\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          triggerOn: \"none\",\r\n          axisPointer: {\r\n            label: {\r\n              background: \"#ffff\",\r\n              show: true,\r\n              formatter: function(params) {\r\n                // this.changeXaxis(params);\r\n                return params.value;\r\n              }.bind(this)\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          type: \"scroll\",\r\n          icon: \"roundRect\",\r\n          data: []\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          boundaryGap: false,\r\n          data: [],\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisPointer: {\r\n            handle: {\r\n              show: true\r\n            },\r\n            value: this.selectedRealTime\r\n          }\r\n        },\r\n        yAxis: {\r\n          name: \"(count)\",\r\n          type: \"value\",\r\n          min: function(value) {\r\n            return (value.min - value.min * 0.05).toFixed(0);\r\n          },\r\n          max: function(value) {\r\n            return (value.max + value.max * 0.05).toFixed(0);\r\n          },\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          }\r\n        },\r\n        series: []\r\n      },\r\n      option1_pie: {\r\n        color: this.getColor(),\r\n        // color: [\"#f72585\", \"#7209b7\", \"#3a0ca3\", \"#4361ee\", \"#4cc9f0\"],\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n        },\r\n        legend: {\r\n          left: \"center\",\r\n          top: \"bottom\",\r\n          data: []\r\n        },\r\n        series: [\r\n          {\r\n            name: \"Executions\",\r\n            type: \"pie\",\r\n            radius: [30, 90],\r\n            roseType: \"radius\",\r\n            label: {\r\n              show: false\r\n            },\r\n            data: []\r\n          }\r\n        ]\r\n      },\r\n      option2_line: {\r\n        color: this.getColor(),\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          triggerOn: \"none\",\r\n          axisPointer: {\r\n            label: {\r\n              background: \"#ffff\",\r\n              show: true,\r\n              formatter: function(params) {\r\n                return params.value;\r\n              }.bind(this)\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          type: \"scroll\",\r\n          icon: \"roundRect\",\r\n          data: []\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          boundaryGap: false,\r\n          data: [],\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisPointer: {\r\n            handle: {\r\n              show: true\r\n            },\r\n            value: this.selectedRealTime\r\n          }\r\n        },\r\n        yAxis: {\r\n          name: \"(%)\",\r\n          type: \"value\",\r\n          min: function(value) {\r\n            return (value.min - value.min * 0.3).toFixed(3);\r\n          },\r\n          max: function(value) {\r\n            return (value.max + value.max * 0.3).toFixed(3);\r\n          },\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          }\r\n        },\r\n        series: []\r\n      },\r\n      option2_pie: {\r\n        color: this.getColor(),\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n        },\r\n        legend: {\r\n          left: \"center\",\r\n          top: \"bottom\",\r\n          data: []\r\n        },\r\n        series: [\r\n          {\r\n            name: \"CpuTimeTotal\",\r\n            type: \"pie\",\r\n            radius: [30, 90],\r\n            roseType: \"radius\",\r\n            label: {\r\n              show: false\r\n            },\r\n            data: []\r\n          }\r\n        ]\r\n      },\r\n      option3_line: {\r\n        xAxis: {\r\n          type: \"category\",\r\n          boundaryGap: false,\r\n          data: [],\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisPointer: {\r\n            handle: {\r\n              show: true\r\n            },\r\n            value: this.selectedRealTime\r\n          }\r\n        },\r\n        color: this.getColor(),\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          triggerOn: \"none\",\r\n          axisPointer: {\r\n            label: {\r\n              background: \"#ffff\",\r\n              show: true,\r\n              formatter: function(params) {\r\n                return params.value;\r\n              }.bind(this)\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          type: \"scroll\",\r\n          icon: \"roundRect\",\r\n          data: []\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          containLabel: true\r\n        },\r\n\r\n        yAxis: {\r\n          name: \"(%)\",\r\n          type: \"value\",\r\n          min: function(value) {\r\n            return (value.min - value.min * 0.3).toFixed(3);\r\n          },\r\n          max: function(value) {\r\n            return (value.max + value.max * 0.3).toFixed(3);\r\n          },\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          }\r\n        },\r\n        series: []\r\n      },\r\n      option3_pie: {\r\n        color: this.getColor(),\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n        },\r\n        legend: {\r\n          left: \"center\",\r\n          top: \"bottom\",\r\n          data: []\r\n        },\r\n        series: [\r\n          {\r\n            name: \"ElapsedTimeTotal\",\r\n            type: \"pie\",\r\n            radius: [30, 90],\r\n            roseType: \"radius\",\r\n            label: {\r\n              show: false\r\n            },\r\n            data: []\r\n          }\r\n        ]\r\n      },\r\n      option4_line: {\r\n        xAxis: {\r\n          type: \"category\",\r\n          boundaryGap: false,\r\n          data: [],\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisPointer: {\r\n            handle: {\r\n              show: true\r\n            },\r\n            value: this.selectedRealTime\r\n          }\r\n        },\r\n        color: this.getColor(),\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          triggerOn: \"none\",\r\n          axisPointer: {\r\n            label: {\r\n              background: \"#ffff\",\r\n              show: true,\r\n              formatter: function(params) {\r\n                return params.value;\r\n              }.bind(this)\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          type: \"scroll\",\r\n          icon: \"roundRect\",\r\n          data: []\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          containLabel: true\r\n        },\r\n\r\n        yAxis: {\r\n          name: \"(?)\",\r\n          type: \"value\",\r\n          min: function(value) {\r\n            return value.min - value.min * 0.3;\r\n          },\r\n          max: function(value) {\r\n            return value.max + value.max * 0.3;\r\n          },\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ababab\"\r\n            }\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          }\r\n        },\r\n        series: []\r\n      },\r\n      option4_pie: {\r\n        color: this.getColor(),\r\n        tooltip: {\r\n          trigger: \"item\",\r\n          formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n        },\r\n        legend: {\r\n          left: \"center\",\r\n          top: \"bottom\",\r\n          data: []\r\n        },\r\n        series: [\r\n          {\r\n            name: \"BufferGetsAvg\",\r\n            type: \"pie\",\r\n            radius: [30, 90],\r\n            roseType: \"radius\",\r\n            label: {\r\n              show: false\r\n            },\r\n            data: []\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    getColor() {\r\n      return this.$store.state.graphColor;\r\n    },\r\n    ...mapMutations([\"SET_SELECTED_REALTIME\"]),\r\n    toggleCheckBox(index) {\r\n      if (this.items[index].isShow === true) {\r\n        this.items[index].isShow = false;\r\n      } else {\r\n        this.items[index].isShow = true;\r\n      }\r\n    },\r\n    changeXaxis(params) {\r\n      var setTime = 0;\r\n      if (!this.getIsSelected) {\r\n        setTime = 100;\r\n      }\r\n      setTimeout(\r\n        function() {\r\n          if (params.seriesData[0] !== undefined && this.getIsSelected) {\r\n            console.log(\"얘는 스키마11111111\");\r\n            this.SET_SELECTED_REALTIME(params.seriesData[0].dataIndex);\r\n          } else {\r\n            console.log(\"얘는 스키마22222222\");\r\n            this.SET_SELECTED_REALTIME(this.getRealTimeList.length - 1);\r\n          }\r\n        }.bind(this),\r\n        setTime\r\n      );\r\n    }\r\n\r\n    // changeAxis(index, params) {\r\n    //   console.log(\"왜이래\", index, params);\r\n    //   if (index === 3) {\r\n    //     if (params.seriesData[0] !== undefined)\r\n    //       this.SET_SELECTED_REALTIME(params.seriesData[0].dataIndex);\r\n    //     else this.SET_SELECTED_REALTIME(this.getRealTimeList.length - 1);\r\n    //   } else if (index === 4) {\r\n    //     if (params.seriesData[0] !== undefined)\r\n    //       this.SET_SELECTED_REALTIME(params.seriesData[0].dataIndex);\r\n    //     else this.SET_SELECTED_REALTIME(this.getRealTimeList.length - 1);\r\n    //   }\r\n    // }\r\n    // changeChart(type) {\r\n    //   if (type === \"line\") {\r\n    //   } else if (type === \"pie\") {\r\n    // }\r\n  },\r\n  computed: {\r\n    ...mapGetters(\"Schema\", [\r\n      \"getRealTimeSchemaList1\",\r\n      \"getRealTimeSchemaList2\",\r\n      \"getRealTimeSchemaList3\",\r\n      \"getRealTimeSchemaList4\",\r\n      \"getSchemaList\"\r\n    ]),\r\n    ...mapGetters([\"getRealTime\", \"getRealTimeList\", \"selectedRealTime\"])\r\n  },\r\n  watch: {\r\n    selectedRealTime: function() {\r\n      const select = this.selectedRealTime;\r\n      for (var i = 0; i < this.getRealTimeSchemaList2.length; i++) {\r\n        this.option1_pie.series[0].data[i].value = this.getRealTimeSchemaList1[\r\n          i\r\n        ].data[select];\r\n        this.option2_pie.series[0].data[i].value = this.getRealTimeSchemaList2[\r\n          i\r\n        ].data[select];\r\n        this.option3_pie.series[0].data[i].value = this.getRealTimeSchemaList3[\r\n          i\r\n        ].data[select];\r\n        this.option4_pie.series[0].data[i].value = this.getRealTimeSchemaList4[\r\n          i\r\n        ].data[select];\r\n      }\r\n      this.option1_line.xAxis.axisPointer.value = select;\r\n      this.option2_line.xAxis.axisPointer.value = select;\r\n      this.option3_line.xAxis.axisPointer.value = select;\r\n      this.option4_line.xAxis.axisPointer.value = select;\r\n    },\r\n    getRealTimeSchemaList1: {\r\n      deep: true,\r\n      handler() {\r\n        var legendList = [];\r\n        const timeList = this.getRealTimeList;\r\n        for (var i = 0; i < this.getRealTimeSchemaList1.length; i++) {\r\n          legendList.push(this.getRealTimeSchemaList1[i].name);\r\n          this.option1_line.series[i].name = this.getRealTimeSchemaList1[\r\n            i\r\n          ].name;\r\n          this.option1_line.series[i].data = this.getRealTimeSchemaList1[\r\n            i\r\n          ].data;\r\n          this.option1_pie.series[0].data[\r\n            i\r\n          ].value = this.getRealTimeSchemaList1[i].data[this.selectedRealTime];\r\n          this.option1_pie.series[0].data[i].name = this.getRealTimeSchemaList1[\r\n            i\r\n          ].name;\r\n        }\r\n        this.option1_line.legend.data = legendList;\r\n        this.option1_line.xAxis.data = timeList;\r\n      }\r\n    },\r\n    getRealTimeSchemaList2: {\r\n      deep: true,\r\n      handler() {\r\n        var legendList = [];\r\n        const timeList = this.getRealTimeList;\r\n        for (var i = 0; i < this.getRealTimeSchemaList2.length; i++) {\r\n          legendList.push(this.getRealTimeSchemaList2[i].name);\r\n          this.option2_line.series[i].name = this.getRealTimeSchemaList2[\r\n            i\r\n          ].name;\r\n          this.option2_line.series[i].data = this.getRealTimeSchemaList2[\r\n            i\r\n          ].data;\r\n          this.option2_pie.series[0].data[\r\n            i\r\n          ].value = this.getRealTimeSchemaList2[i].data[this.selectedRealTime];\r\n          this.option2_pie.series[0].data[i].name = this.getRealTimeSchemaList2[\r\n            i\r\n          ].name;\r\n        }\r\n        this.option2_line.legend.data = legendList;\r\n        this.option2_line.xAxis.data = timeList;\r\n      }\r\n    },\r\n    getRealTimeSchemaList3: {\r\n      deep: true,\r\n      handler() {\r\n        var legendList = [];\r\n        const timeList = this.getRealTimeList;\r\n        for (var i = 0; i < this.getRealTimeSchemaList3.length; i++) {\r\n          legendList.push(this.getRealTimeSchemaList3[i].name);\r\n          this.option3_line.series[i].name = this.getRealTimeSchemaList3[\r\n            i\r\n          ].name;\r\n          this.option3_line.series[i].data = this.getRealTimeSchemaList3[\r\n            i\r\n          ].data;\r\n          this.option3_pie.series[0].data[\r\n            i\r\n          ].value = this.getRealTimeSchemaList3[i].data[this.selectedRealTime];\r\n          this.option3_pie.series[0].data[i].name = this.getRealTimeSchemaList3[\r\n            i\r\n          ].name;\r\n        }\r\n        this.option3_line.legend.data = legendList;\r\n        this.option3_line.xAxis.data = timeList;\r\n      }\r\n    },\r\n    getRealTimeSchemaList4: {\r\n      deep: true,\r\n      handler() {\r\n        var legendList = [];\r\n        const timeList = this.getRealTimeList;\r\n        for (var i = 0; i < this.getRealTimeSchemaList4.length; i++) {\r\n          legendList.push(this.getRealTimeSchemaList4[i].name);\r\n          this.option4_line.series[i].name = this.getRealTimeSchemaList4[\r\n            i\r\n          ].name;\r\n          this.option4_line.series[i].data = this.getRealTimeSchemaList4[\r\n            i\r\n          ].data;\r\n          this.option4_pie.series[0].data[\r\n            i\r\n          ].value = this.getRealTimeSchemaList4[i].data[this.selectedRealTime];\r\n          this.option4_pie.series[0].data[i].name = this.getRealTimeSchemaList4[\r\n            i\r\n          ].name;\r\n        }\r\n        this.option4_line.legend.data = legendList;\r\n        this.option4_line.xAxis.data = timeList;\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    axios.get(SERVER.URL + SERVER.ROUTES.getSettingsSchema).then((res) => {\r\n      for (var i = 0; i < res.data.map.schema.length; i++) {\r\n        this.option1_line.series.push({\r\n          name: \"\",\r\n          type: \"line\",\r\n          data: []\r\n        });\r\n        this.option1_pie.series[0].data.push({\r\n          value: 0,\r\n          name: \"\"\r\n        });\r\n        this.option2_line.series.push({\r\n          name: \"\",\r\n          type: \"line\",\r\n          data: []\r\n        });\r\n        this.option2_pie.series[0].data.push({\r\n          value: 0,\r\n          name: \"\"\r\n        });\r\n        this.option3_line.series.push({\r\n          name: \"\",\r\n          type: \"line\",\r\n          data: []\r\n        });\r\n        this.option3_pie.series[0].data.push({\r\n          value: 0,\r\n          name: \"\"\r\n        });\r\n        this.option4_line.series.push({\r\n          name: \"\",\r\n          type: \"line\",\r\n          data: []\r\n        });\r\n        this.option4_pie.series[0].data.push({\r\n          value: 0,\r\n          name: \"\"\r\n        });\r\n      }\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.schema-chart-box {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: 550px;\r\n}\r\n.schema-chart-box > div {\r\n  width: 49%;\r\n  min-width: 500px;\r\n}\r\n.schema-chart-size {\r\n  height: 250px;\r\n  display: flex;\r\n}\r\n.schema-chart-size-in {\r\n  width: 50% !important;\r\n}\r\n</style>\r\n"]}]}