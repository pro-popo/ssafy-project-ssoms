{"remainingRequest":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\s03p31b303\\frontend\\src\\views\\Socket.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\s03p31b303\\frontend\\src\\views\\Socket.vue","mtime":1604537926251},{"path":"D:\\s03p31b303\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\s03p31b303\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgU3RvbXAgZnJvbSAid2Vic3RvbXAtY2xpZW50IjsNCmltcG9ydCBTb2NrSlMgZnJvbSAic29ja2pzLWNsaWVudCI7DQppbXBvcnQgU0VSVkVSIGZyb20gIkAvYXBpL3NwcmluZy5qcyI7DQppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOw0KDQppbXBvcnQgeyBtYXBNdXRhdGlvbnMgfSBmcm9tICJ2dWV4IjsNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAiU29ja2V0IiwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgdXNlck5hbWU6ICIiLA0KICAgICAgbWVzc2FnZTogIiIsDQogICAgICByZWN2TGlzdDogW10sDQogICAgICB0ZXN0TGlzdDogW10NCiAgICB9Ow0KICB9LA0KICBjcmVhdGVkKCkgew0KICAgIC8vIEFwcC52dWXqsIAg7IOd7ISx65CY66m0IOyGjOy8kyDsl7DqsrDsnYQg7Iuc64+E7ZWp64uI64ukLg0KICAgIHRoaXMuY29ubmVjdCgpOw0KICAgIGF4aW9zDQogICAgICAuZ2V0KFNFUlZFUi5VUkwgKyAiL1NvY2tldC90ZXN0IikNCiAgICAgIC50aGVuKCgpID0+IHsNCiAgICAgICAgY29uc29sZS5sb2coIuyXsOqysCIpOw0KICAgICAgfSkNCiAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTsNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGNvbm5lY3QoKSB7DQogICAgICBjb25zdCBzZXJ2ZXJVUkwgPSAiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3Nzb21zL3N0b21wIjsNCiAgICAgIGxldCBzb2NrZXQgPSBuZXcgU29ja0pTKHNlcnZlclVSTCk7DQogICAgICB0aGlzLnN0b21wQ2xpZW50ID0gU3RvbXAub3Zlcihzb2NrZXQpOw0KICAgICAgLy8gY29uc29sZS5sb2coYOyGjOy8kyDsl7DqsrDsnYQg7Iuc64+E7ZWp64uI64ukLiDshJzrsoQg7KO87IaMOiAke3NlcnZlclVSTH1gKTsNCiAgICAgIHRoaXMuc3RvbXBDbGllbnQuY29ubmVjdCgNCiAgICAgICAge30sDQogICAgICAgIChmcmFtZSkgPT4gew0KICAgICAgICAgIC8vIOyGjOy8kyDsl7DqsrAg7ISx6rO1DQogICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlOw0KICAgICAgICAgIGNvbnNvbGUubG9nKCLshozsvJMg7Jew6rKwIOyEseqztSIsIGZyYW1lKTsNCiAgICAgICAgICAvLyDshJzrsoTsnZgg66mU7Iuc7KeAIOyghOyGoSBlbmRwb2ludOulvCDqtazrj4Xtlanri4jri6QuDQogICAgICAgICAgLy8g7J2065+w7ZiV7YOc66W8IHB1YiBzdWIg6rWs7KGw65286rOgIO2VqeuLiOuLpC4NCiAgICAgICAgICAvLyAgdGhpcy5zdG9tcENsaWVudC5zdWJzY3JpYmUoIi9zZW5kRGF0YSIsIHJlcyA9PiB7DQogICAgICAgICAgLy8gICAgY29uc29sZS5sb2coJ+q1rOuPheycvOuhnCDrsJvsnYAg66mU7Iuc7KeAIOyeheuLiOuLpC4nLCByZXMuYm9keSk7DQogICAgICAgICAgLy8gICAgLy8g67Cb7J2AIOuNsOydtO2EsOulvCBqc29u7Jy866GcIO2MjOyLse2VmOqzoCDrpqzsiqTtirjsl5Ag64Sj7Ja07KSN64uI64ukLg0KICAgICAgICAgIC8vICAgIHRoaXMucmVjdkxpc3QucHVzaChKU09OLnBhcnNlKHJlcy5ib2R5KSkNCiAgICAgICAgICAvLyAgfSk7DQoNCiAgICAgICAgICAvLyBzdWJzY3JpYmUgbWVzc2FnZQ0KICAgICAgICAgIHRoaXMuc3RvbXBDbGllbnQuc3Vic2NyaWJlKCIvc2VuZERhdGEvc2NoZWR1bGVyTSIsIChyZXMpID0+IHsNCiAgICAgICAgICAgIHRoaXMucmVjdkxpc3QucHVzaChKU09OLnBhcnNlKHJlcy5ib2R5KSk7DQogICAgICAgICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpOw0KICAgICAgICAgICAgY29uc29sZS5sb2coDQogICAgICAgICAgICAgIHRoaXMucmVjdkxpc3RbdGhpcy5yZWN2TGlzdC5sZW5ndGggLSAxXS5PcmFjbGVTdGFzdGljcw0KICAgICAgICAgICAgICAgIC5kYXRhYmFzZUNwdVRpbWVSYXRpbw0KICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucmVjdkxpc3QubGVuZ3RoIC0gMSk7DQogICAgICAgICAgICBjb25zb2xlLmxvZygiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpOw0KICAgICAgICAgIH0pOw0KICAgICAgICB9LA0KICAgICAgICAoZXJyb3IpID0+IHsNCiAgICAgICAgICAvLyDshozsvJMg7Jew6rKwIOyLpO2MqA0KICAgICAgICAgIGNvbnNvbGUubG9nKCLshozsvJMg7Jew6rKwIOyLpO2MqCIsIGVycm9yKTsNCiAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlOw0KICAgICAgICB9DQogICAgICApOw0KICAgIH0sDQogICAgLi4ubWFwTXV0YXRpb25zKCJPcmFjbGUiLCBbIlNFVF9MSVNUIl0pDQogIH0sDQogIHdhdGNoOiB7DQogICAgcmVjdkxpc3Q6IGZ1bmN0aW9uKCkgew0KICAgICAgLy8gdGhpcy4kc3RvcmUudGhpcy50ZXN0TGlzdC5wdXNoKA0KICAgICAgLy8gdGhpcy5yZWN2TGlzdFt0aGlzLnJlY3ZMaXN0Lmxlbmd0aCAtIDFdLk9yYWNsZVN0YXN0aWNzDQogICAgICAvLyAgIC5kYXRhYmFzZUNwdVRpbWVSYXRpbw0KICAgICAgLy8gKTsNCiAgICAgIHRoaXMuU0VUX0xJU1QodGhpcy5yZWN2TGlzdFt0aGlzLnJlY3ZMaXN0Lmxlbmd0aCAtIDFdLk9yYWNsZVN0YXN0aWNzKTsNCiAgICB9DQogIH0NCn07DQo="},{"version":3,"sources":["Socket.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Socket.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <!-- <div\r\n      v-for=\"(item, idx) in recvList\"\r\n      :key=\"idx\"\r\n    >\r\n      <h3>{{ item }}</h3>\r\n    </div> -->\r\n    {{ testList }}\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Stomp from \"webstomp-client\";\r\nimport SockJS from \"sockjs-client\";\r\nimport SERVER from \"@/api/spring.js\";\r\nimport axios from \"axios\";\r\n\r\nimport { mapMutations } from \"vuex\";\r\n\r\nexport default {\r\n  name: \"Socket\",\r\n  data() {\r\n    return {\r\n      userName: \"\",\r\n      message: \"\",\r\n      recvList: [],\r\n      testList: []\r\n    };\r\n  },\r\n  created() {\r\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\r\n    this.connect();\r\n    axios\r\n      .get(SERVER.URL + \"/Socket/test\")\r\n      .then(() => {\r\n        console.log(\"연결\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  },\r\n  methods: {\r\n    connect() {\r\n      const serverURL = \"http://localhost:8080/ssoms/stomp\";\r\n      let socket = new SockJS(serverURL);\r\n      this.stompClient = Stomp.over(socket);\r\n      // console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`);\r\n      this.stompClient.connect(\r\n        {},\r\n        (frame) => {\r\n          // 소켓 연결 성공\r\n          this.connected = true;\r\n          console.log(\"소켓 연결 성공\", frame);\r\n          // 서버의 메시지 전송 endpoint를 구독합니다.\r\n          // 이런형태를 pub sub 구조라고 합니다.\r\n          //  this.stompClient.subscribe(\"/sendData\", res => {\r\n          //    console.log('구독으로 받은 메시지 입니다.', res.body);\r\n          //    // 받은 데이터를 json으로 파싱하고 리스트에 넣어줍니다.\r\n          //    this.recvList.push(JSON.parse(res.body))\r\n          //  });\r\n\r\n          // subscribe message\r\n          this.stompClient.subscribe(\"/sendData/schedulerM\", (res) => {\r\n            this.recvList.push(JSON.parse(res.body));\r\n            console.log(\"===============================\");\r\n            console.log(\r\n              this.recvList[this.recvList.length - 1].OracleStastics\r\n                .databaseCpuTimeRatio\r\n            );\r\n            console.log(this.recvList.length - 1);\r\n            console.log(\"===============================\");\r\n          });\r\n        },\r\n        (error) => {\r\n          // 소켓 연결 실패\r\n          console.log(\"소켓 연결 실패\", error);\r\n          this.connected = false;\r\n        }\r\n      );\r\n    },\r\n    ...mapMutations(\"Oracle\", [\"SET_LIST\"])\r\n  },\r\n  watch: {\r\n    recvList: function() {\r\n      // this.$store.this.testList.push(\r\n      // this.recvList[this.recvList.length - 1].OracleStastics\r\n      //   .databaseCpuTimeRatio\r\n      // );\r\n      this.SET_LIST(this.recvList[this.recvList.length - 1].OracleStastics);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}